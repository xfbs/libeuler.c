#!/usr/bin/env ruby

puts "// file: docstring_test.c"
puts "// autogenerated from docstrings in headers by docstring.rb"
puts "// don't modify this file - it will be overwritten"
puts "// this script assumes it's begin ran from within the test/ directory"

inputfiles = Dir["../include/euler/*.h"]

inputfiles.each do |inputfile|
  file = File.basename(inputfile)

  puts "#include <euler/#{file}>"
end

puts

# skip test.h - can't test that in a meaningful way
inputfiles.delete_if{|n| n.match(/test.h/)}

inputfiles.each do |inputfile|
  input = File.read(inputfile)
  file = File.basename(inputfile)[0..-3]
  sections = input.split("\n\n")

  sections.each do |section|
    docstrings = section.scan(/^(.+)```c\n(\1[^`]+\n)+\1```/m)
    docstrings.map! do |match|
      comment, line = match
      lines = line.split("\n")
      lines.map do |l|
        l.scan(/#{comment}(.+)/)[0]
      end.join("\n")
    end

    # try to find out what name this section has
    section_name = "unknown"
    section.gsub!(/\/\*(?:[^\*]|(\*[^\/])?)*\*\//m, "")
    section.gsub!(/\/\/[^\n]*$/, "")
    define_name = section.scan(/^#define\s+(\w+)\s*\(/m)[0]
    section_name = define_name[0] if define_name
    function_name = section.scan(/(\w+)\s*\(/)[0]
    section_name = function_name[0] if function_name

    # make sure we don't get "doctest_vecp_vecp_index"
    section_name = section_name.split("_")
    if section_name[0] == file && section_name.length >= 2
      section_name.shift
    end
    section_name = section_name.join("_")

    offset = 1
    docstrings.each do |docstring|
      test = "doctest_#{file}_#{section_name}"

      # if there are multiple docstrings in this section, number them
      if docstrings.length > 1
        test = "#{test}_#{offset}"
      end

      puts "void #{test}() {"
      puts docstring.split("\n").map{|s| if s.length == 0 then "" else "  #{s}" end}.join("\n")
      puts "}\n\n"
      offset += 1
    end
  end
end
